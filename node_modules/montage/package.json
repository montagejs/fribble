{
  "name": "montage",
  "version": "0.13.0-alpha",
  "publishConfig": {
    "tag": "edge"
  },
  "description": "A UI Framework",
  "main": "montage",
  "bin": {
    "montage": "bin/montage"
  },
  "overlay": {
    "browser": {
      "main": "core/core",
      "mappings": {
        "mr": {
          "name": "mr",
          "location": "packages/mr"
        },
        "q": {
          "name": "q",
          "location": "packages/mr/packages/q"
        }
      }
    }
  },
  "dependencies": {
    "collections": "~0.1.17",
    "frb": "~0.1.27",
    "mousse": "~0.1.2"
  },
  "devDependencies": {
    "montage-testing": "0.2.0-alpha",
    "mr": "~0.12.6",
    "q": "~0.8.12",
    "q-io": "~1.3.2",
    "jsdom": "~0.2.19"
  },
  "exclude": [
    "bin",
    "etc",
    "lab",
    "node.js",
    "test",
    "tools"
  ],
  "readme": "## Montage\n\nMontage is an application framework powered by standard web technologies.\n\nMontage simplifies the development of rich HTML5 applications by providing modular components, real-time two-way data binding, CommonJS dependency management, and many more conveniences.\n\nMontage opens a world of opportunity that is only just now available for web developers.\n\n#### Components and Templates\n\nMontage has a clean interface for creating custom user interface components. Each component can stand alone or be composed from other components.  Each component is modeled as a stand-alone web application, with its own HTML template, JavaScript, CSS, serialized component object model, and resources.  With few exceptions, a component can stand on the web platform like any other web page.  There are no fully JavaScript driven templates in Montage. This separation of concerns allows designers to use the technologies they are comfortable with, without having to dig into the JavaScript, and allows developers to isolate and test individual components using familiar techniques.\n\n#### Two-way Data binding\n\nMontage makes it easier to manage your application and UI state with data bindings. A UI component or Montage object can establish a one way or bi-directional binding with another component or object. When the bound property, or deeper property path, of the bound object is updated then the source object is kept in sync.\n\n### Prerequisites\n\nTo get started with Montage, you will need the following:\n\n-   A Git client, and public SSH key. For details on installing Git and creating your key, see the setup guides on github.com.\n-   A local web server to serve Montage application. Montage applications can only be served from an HTTP address, not from a local file URL.\n-   A recent stable release of Chrome, Safari or Firefox.\n\n### Quick setup\n\nIf you’re already familiar with using Git, GitHub, and how to configure a local web server,\n\n1.  In a terminal window, create a new projects folder (eg. ~/Projects).\n    ``mkdir Projects``\n    ``cd Projects``\n2.  Clone Montage into ~/Projects\n    ``git clone git@github.com:montagejs/montage.git``\n3.  Configure your local web server to serve the ~/Projects folder over HTTP.\n    Please refer to the suggested Apache configuration found at ``etc/apache-montage.conf``.  This\n    will need to be configured and installed wherever your Apache installation will load other configuration files (eg /etc/apache2/other).\n4.  Verify your setup by browsing to [http://localhost:8081/montage/test/run.html](http://localhost:8081/montage/test/run.html).\n\n--------\n\n### CommonJS\n\nMontage fully supports CommonJS Modules 1.1.1, Packages 1.0, and a\nsubset of Package Mappings proposal C.  It also supports some extensions\nexemplified by NodeJS and NPM.\n\n-   **module.exports**: Modules that do not have cyclic dependencies\n    (modules with dependencies that in turn ultimately depend their own\n    exports) can redefine their exports object by assigning to\n    ``module.exports``.  Montage itself uses this feature sparingly.\n-   **dependencies**: If a package declares a package dependency\n    using NPM’s ``dependencies`` property, Montage looks for that\n    package in the package’s ``node_modules`` subdirectory.  Montage\n    does not presently support cases where a dependency is in a common\n    dependency’s ``node_modules`` directory.  Unlike NPM, with Montage\n    packages, you can override the location of the ``node_modules``\n    directory with the ``directories.packages`` property, or use\n    mappings to find individual packages in alternate locations or give\n    them different local names.\n-   **mappings**: Packages can declare some or all of their package\n    dependencies with the URL ``location`` of the package, particularly\n    a URL relative to the depending package.  Mappings override\n    dependencies if there are conflicts.\n-   **require.packageDescription**: Packages expose the parsed\n    contents of the ``package.json`` file.\n-   **module.path**: Packages expose the URL of the corresponding\n    source.\n-   **module.directory**: Packages expose the URL of the directory\n    containing the corresponding source.\n-   **overlay**: Packages may contain platform-specific overlays.\n    Montage applies the ``browser`` overlay on the root of the package\n    description.\n-   **reels**: Montage permits components to be loaded from a directory\n    with a ``.reel`` extension.  The module system redirects\n    ``require(\"x.reel\")`` to ``require(\"x.reel/x\")``.\n-   **metadata**: Montage hides data on each object exported by a module\n    to permit the serialization system to implicitly discover the module\n    and package that can reinstantiate an object.\n\nThe Montage modules debug-mode run-time loads modules asynchronously and\ncalculates their transitive dependencies heuristically--by statically\nscanning for ``require`` calls using a simple regular expression.\nMontage can load cross-origin scripts in debug-mode if the CORS headers\nare set on the remote server.\n\nTake a look at the Montage Optimizer, tools/mop, to optimize applications for production.  The optimizer can bundle packages with all of the dependent modules, can preload bundles of progressive enhancements in phases, and can generate HTML5 application cache manifests.",
  "readmeFilename": "README.md",
  "_id": "montage@0.13.0-alpha",
  "_from": "montage@0.13.0-alpha"
}
